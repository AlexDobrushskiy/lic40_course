
# Question 9**: Боремся со ссылочным спамом

# Одна из проблем нашего ранжирования страниц - то, что страницы могут ссылаться 
# друг на друга, "накручивая" свой ранг. Считаем, что ссылка A->B - взаимная,
# если существует путь по ссылкам от B до A, длины меньше или равной k, где k - это 
# некий "уровень сговора". Длина ссылочного пути - это количество ссылок, по которым 
# нужно перейти, чтобы попасть с одной страницы на другую.

# Если k=0, то тогда ссылка A->A (страницы на саму себя) - взаимная ссылка для
# узла A.
# Если k=1, то B->A считается взаимной ссылкой, если есть ссылка A->B.(то есть 
# длина пути от A до B равна 1)
# Если k=2, B->A считается взаимной, если существует путь A->C->B (длина пути=2),
# или если существует прямая ссылка A->B(длина пути=1).

# Изменити процедуру compute_ranks, чтобы:
#  - Она принимала дополнительный параметр k (натуральное число), и
#  - Исключала взаимные ссылки длины менее или равной k при вычислении ранга страницы.


def compute_ranks(graph):
    d = 0.8 # damping factor
    numloops = 10
    ranks = {}
    npages = len(graph)
    for page in graph:
        ranks[page] = 1.0 / npages
    for i in range(0, numloops):
        newranks = {}
        for page in graph:
            newrank = (1 - d) / npages
            for node in graph:
                if page in graph[node]:
                    newrank = newrank + d * (ranks[node]/len(graph[node]))
            newranks[page] = newrank
        ranks = newranks
    return ranks


# For example

g = {'a': ['a', 'b', 'c'], 'b':['a'], 'c':['d'], 'd':['a']}

#print compute_ranks(g, 0) # ссылка a->a является взаимной
#>>> {'a': 0.26676872354238684, 'c': 0.1216391112164609,
#     'b': 0.1216391112164609, 'd': 0.1476647842238683}

#print compute_ranks(g, 1) # a->a, a->b, b->a ссылки взаимны
#>>> {'a': 0.14761759762962962, 'c': 0.08936469270123457,
#     'b': 0.04999999999999999, 'd': 0.12202199703703702}

#print compute_ranks(g, 2)
# a->a, a->b, b->a, a->c, c->d, d->a ссылки взаимны
# (у всех страниц одинаковый ранг)
#>>> {'a': 0.04999999999999999, 'c': 0.04999999999999999,
#     'b': 0.04999999999999999, 'd': 0.04999999999999999}

